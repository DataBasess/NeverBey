package com.epro.leave.controller.master;

import java.util.List;

import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Projections;
import org.hibernate.transform.Transformers;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.epro.leave.common.CommonResponse;
import com.epro.leave.common.DropdownResponse;
import com.epro.leave.common.MessageResponse;
import com.epro.leave.entity.Employee;
import com.epro.leave.service.EmployeeService;

@RestController
@RequestMapping("api/employee")
public class EmployeeController {

	@Autowired
	EmployeeService employeeService;

	@PostMapping("/save")
	public ResponseEntity<MessageResponse> saveParameterTableHeader(@RequestBody Employee employee) {

		try {
			employeeService.save(employee);
			return CommonResponse.getSuccessMessageResponse();
		} catch (Exception e) {
			e.printStackTrace();
			return CommonResponse.getErrorMessageResponse();
		}
	}

	@PostMapping("/update")
	public ResponseEntity<MessageResponse> updateParameterTableHeader(@RequestBody Employee employee) {

		try {
			employeeService.update(employee);
			return CommonResponse.getSuccessMessageResponse();
		} catch (Exception e) {
			e.printStackTrace();
			return CommonResponse.getErrorMessageResponse(e);
		}
	}
	
	@PostMapping("/remove")
	public ResponseEntity<MessageResponse> removeParameterTableHeader(@RequestBody List<Employee> employee) {
		
		try {
			System.out.println("==================================Remove=============================================");
			employeeService.mergeAndRemove(employee);
			return CommonResponse.getSuccessMessageResponse();
		} catch (Exception e) {
			e.printStackTrace();
			return CommonResponse.getErrorMessageResponse(e);
		}
	}

	@PostMapping("/load")
	public List<Employee> findEmployee() {
		List<Employee> empList = employeeService.findAll(Employee.class);
		return empList;

	}
	
	@PostMapping("/dropdown/employee")
	public List<DropdownResponse> getEmployee() {
		
		List<DropdownResponse> listDrop = null;
		try {
			DetachedCriteria criteria = DetachedCriteria.forClass(Employee.class);
			criteria.setProjection(Projections.projectionList()
					.add(Projections.property("employeeCode").as("dropdownIdChar"))
					.add(Projections.property("employeeFirstName").as("dropdownValue1"))
					);
			criteria.setResultTransformer(Transformers.aliasToBean(DropdownResponse.class) );
			listDrop = employeeService.findByCriteria(criteria);
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		return listDrop;
	}
}
